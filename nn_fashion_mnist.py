# -*- coding: utf-8 -*-
"""NN Fashion MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-oOmrQL6W5IT2MeT12H64bgeVn4YMv8E

#### <b>Introduction</b> 
Having implemented a neural network from scratch using for loops, you will now be using vectorization (wherever applicable) to improve the performance of the model and equip it to deal with the complete Fashion MNIST Dataset.

The dataset consists of 70,000 images of fashion/clothing items belonging to 10 different categories/classes. It has furhter been divided into 60,000 training images and 10,000 test images and each image is a 28*28 grayscale image (hence 1 color channel). It is recommended that you go through  [this link](https://www.kaggle.com/zalando-research/fashionmnist) to familiarize yourself with the dataset.

In this phase, you will load the required dataset from the keras datasets library. To get the best results, you will need to tweak hyperparameters, and the best values will not necessarily be the ones you performed for your computations in phase 1 with.



###### <b>Side note</b>
The `plot_model` method will only work if you have the `pydot` python package installed along with [Graphviz](https://graphviz.gitlab.io/download/). If you do not wish to use this then simply comment out the import for `pydot`

#### <b>Before You Begin</b>

Skeleton code is provided to get you started. The main methods that you need to implement correspond to the four steps of the training process of a NN which are as follows:
1. Initialize variables and initialize weights
2. Forward pass
3. Backward pass AKA Backpropogation
4. Weight Update AKA Gradient Descent


A `fit` function is what combines the previous three functions and overall trains the network to __fit__ to the provided training examples. The provided `fit` methods requires all the four steps of the training process to be working correctly. The function has been setup in a way that it expects the above four methods to take particular inputs and return particular outputs. __You are supposed to work within this restriction__ 



__To see if your model is working correctly, you need to make sure that your model loss is going down during training__

__The number of hidden layers needs to be >= 2, and the implementation should not crash if we attempt to arbitrarily change it__
"""

# Commented out IPython magic to ensure Python compatibility.
from numba import jit
import numpy as np
import pandas as pd
import time
# %matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('seaborn')
from IPython.display import Image
import pydot
from tqdm import tqdm_notebook
import seaborn as sns
from keras.datasets import fashion_mnist
from keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from keras.utils import np_utils
from sklearn.datasets import make_moons
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import confusion_matrix,classification_report
from google.colab import drive
import glob
import cv2

# This function will be used to plot the confusion matrix at the end of this notebook

def plot_confusion_matrix(conf_mat):
    classes = ['T-shirt/top','Trouser/pants','Pullover shirt','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot']
    df_cm = pd.DataFrame(conf_mat,classes,classes)
    plt.figure(figsize=(15,9))
    sns.set(font_scale=1.4)
    sns.heatmap(df_cm, annot=True,annot_kws={"size": 16})
    plt.show()

class_labels = ['T-shirt/top','Trouser/pants','Pullover shirt','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot']

# Enter group lead's roll number here. This will be used for plotting purposes

rollnumber = 23100191

"""#### __Dataset from Keras Library__

The required library has been imported for you as fashion_mnist. Use it to load the train and test data accordingly.
"""

classes = 10 # Do not change this

# Download Fashion MNIST dataset
###### Code Here ######
(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()


# Split the fashion MNIST dataset into train and test sets
# Convert y_train and y_test to categorical binary values
###### Code Here ######

y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
print(y_train.shape)

#Reshape train and test images as one-dimensional arrays
###### Code Here ######
print(x_train.shape)
print(x_test.shape)
x_train = x_train.reshape(x_train.shape[0],784,)
x_test = x_test.reshape(x_test.shape[0],784,)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train = x_train / 255.0
x_test = x_test / 255.0
print(x_train.shape)
print(x_test.shape)

"""#### __NN Implementation__
Your implementation of NN needs to use the `sigmoid` activation function for all hidden layers and the `softmax` activation function for the output layer. The NN model you will be creating here will consits of only three layers: 1 input layer, n hidden layers (where you have the liberty to define n) and 1 output layer.
"""

class NeuralNetwork():
    
    @staticmethod   
    def cross_entropy_loss(y_pred, y_true):
        # implement cross_entropy_loss function
        #TO DO

        return -(y_true*np.log(y_pred)).sum()

    @staticmethod
  
    def accuracy(y_pred, y_true):
        # implement accuracy function
        #TO DO
        true = 0
        itr = y_true.shape[0]
        for i in range (itr):
          if y_pred[i] == y_true[i]:
            true += 1
        accuracy = float((true/y_pred.shape[0])*100.0)

        return accuracy

    @staticmethod
  
    def softmax(x):
        # implement softmax function
        #TO DO
        exponent = np.exp(x)
        sum_ex = exponent.sum(axis = 1, keepdims=True)
        return exponent/sum_ex

    @staticmethod
  
    def sigmoid(x):
        #TO DO
    
        return 1/(1+np.exp(-x))
  
    def __init__(self, nodes_per_layer):
        '''Creates a Feed-Forward Neural Network.
        The parameters represent the number of nodes in each layer. 
        Look at the inputs to the function, and use 'try and accept'
        to catch errors if number of layers are < 2.
        '''
        
        self.num_layers = len(nodes_per_layer) # including input and output layers
        self.nodes_per_layer = nodes_per_layer
        self.input_shape = 784
        self.output_shape = 10

        self.weights_ = []
        self.biases_ = []
        self.__init_weights(nodes_per_layer)
    
    def __init_weights(self, nodes_per_layer):
        '''Initializes all weights based on standard normal distribution and all biases to 0.'''
        '''Initialize weights for each layer except the input layer, since it does not have weights.'''
        
        '''
        W_h = np.random.normal(size=(self.input_shape,self.hidden_shape))
        b_h = np.zeros(shape=(self.hidden_shape,))

        W_o = np.random.normal(size=(self.hidden_shape,self.output_shape))
        b_o = np.zeros(shape=(self.output_shape,))
        '''
        
        for x in range(0,self.num_layers-1):
          w = np.random.normal(size=(self.nodes_per_layer[x], self.nodes_per_layer[x+1]))
          self.weights_.append(w)
      
          b = np.zeros(shape=(self.nodes_per_layer[x+1]))
          self.biases_.append(b)

    
    def forward_pass(self, input_data):
        '''Executes the feed forward algorithm.
        "input_data" is the input to the network in row-major form
        Returns "activations", which is a list of all layer outputs (excluding input layer of course)'''
        
        activations =[]
        data = input_data
        #print(data.shape,self.weights_[0].shape,self.biases_[0].shape)
        for x in range(0, self.num_layers-2):
          layer = np.matmul(data,self.weights_[x]) + self.biases_[x]
          layer = self.sigmoid(layer)
          activations.append(layer)
          data = layer
        #print(data.shape,self.weights_[-1].shape,self.biases_[-1].shape)
        o_layer = np.matmul(data,self.weights_[-1]) + self.biases_[-1]       #output
        o_layer = self.softmax(o_layer)                                       #applying softmax on output layer
        activations.append(o_layer)

        return activations
  
    def sigmoid_derivative(self,x):
      return x*(1-x)
    
    def backward_pass(self, targets, layer_activations):
        '''Executes the backpropogation algorithm.
        "targets" is the ground truth/labels
        "layer_activations" are the return value of the forward pass step
        Returns "deltas", which is a list containing weight update values for all layers (excluding the input layer of course)'''
        
        ###### Code Here ######
        deltas = []
        layer_activations.reverse()
        output = (layer_activations[0] - targets) * self.sigmoid_derivative(layer_activations[0])     #calculating output layer error
        deltas.append(output)
        self.weights_.reverse()
        for i in range(1,self.num_layers-1):
          hidden = (np.matmul(self.weights_[i-1], output.T).T) * self.sigmoid_derivative(layer_activations[i]) #calculating hidden layer error
          output=hidden
          deltas.append(hidden)
        deltas.reverse()
        layer_activations.reverse()
        self.weights_.reverse()
        return deltas
    
    def weight_update(self, deltas, layer_inputs, lr):
        '''Executes the gradient descent algorithm.
        "deltas" is return value of the backward pass step
        "layer_inputs" is a list containing the inputs for all layers (including the input layer)
        "lr" is the learning rate'''
        
  

        for x in range(0, self.num_layers-1):
          self.weights_[x] = self.weights_[x] - lr* np.matmul((deltas[x]).T, layer_inputs[x]).T
          self.biases_[x] = self.biases_[x] - lr * np.sum(deltas[x])

  

    def fit(self, Xs, Ys, epochs, lr=1e-3):
            history = []
            for epoch in tqdm_notebook(range(epochs)):
                num_samples = Xs.shape[0]
                for i in range(num_samples):

                    sample_input = Xs[i,:].reshape((1,self.input_shape))
                    sample_target = Ys[i,:].reshape((1,self.output_shape))
                    
                    activations = self.forward_pass(sample_input)   # Call forward_pass function 
                    deltas = self.backward_pass(sample_target, activations)    # Call backward_pass function 
                    layer_inputs = [sample_input] + activations[:-1]
                    
                    # Call weight_update function 
                    self.weight_update(deltas, layer_inputs, lr)
                
                preds = self.predict(Xs)   # Call predict function 

                current_loss = self.cross_entropy_loss(preds, Ys)
                
                if  epoch==epochs-1:
                  confusion_mat=confusion_matrix(Ys.argmax(axis=1), preds.argmax(axis=1),labels=np.arange(10))  
                  plot_confusion_matrix(confusion_mat)
                  report = classification_report(Ys, np_utils.to_categorical(preds.argmax(axis=1),num_classes=classes), target_names=class_labels)
                  print(report)
                history.append(current_loss)
            return history
    
    def predict(self, Xs):
        '''Returns the model predictions (output of the last layer) for the given "Xs".'''
        predictions = []
        num_samples = Xs.shape[0]
        for i in range(num_samples):
            sample = Xs[i,:].reshape((1,self.input_shape))
            sample_prediction = self.forward_pass(sample)[-1]
            predictions.append(sample_prediction.reshape((self.output_shape,)))
        return np.array(predictions)
    
    def evaluate(self, Xs, Ys):
        '''Returns appropriate metrics for the task, calculated on the dataset passed to this method.'''
        pred = self.predict(Xs)
        return self.cross_entropy_loss(pred, Ys), self.accuracy(pred.argmax(axis=1), Ys.argmax(axis=1))
  
    def plot_model(self, filename):
        '''Provide the "filename" as a string including file extension. Creates an image showing the model as a graph.'''
        graph = pydot.Dot(graph_type='digraph')
        graph.set_rankdir('LR')
        graph.set_node_defaults(shape='circle', fontsize=0)
        nodes_per_layer = [self.input_shape, self.hidden_shape, self.output_shape]
        for i in range(self.num_layers-1):
            for n1 in range(nodes_per_layer[i]):
                for n2 in range(nodes_per_layer[i+1]):
                    edge = pydot.Edge(f'l{i}n{n1}', f'l{i+1}n{n2}')
                    graph.add_edge(edge)
        graph.write_png(filename)

# These are what we call the hyperparameters (a.k.a Black Magic). 

EPOCH = 20            # must be an int
LEARNING_RATE = 0.01
nodes_per_layer = [784,300,90,30,10]  #int values for nodes of each layer. # of hidden layers >= 2.

start = time.time()

nn = NeuralNetwork(nodes_per_layer=nodes_per_layer)
history = nn.fit(x_train, y_train, epochs=EPOCH, lr=LEARNING_RATE)
plt.plot(history);
plt.gca().set(xlabel='Epoch', ylabel='Cross-entropy', title='Training Plot {}'.format(rollnumber));
end = time.time()

print("Runtime of the algorithm is ", round((end - start),3)," seconds")

# print accuracy on test set here
print(nn.evaluate(x_train,y_train))